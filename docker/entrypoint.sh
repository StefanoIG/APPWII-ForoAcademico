#!/bin/bash

# Script de inicializaci√≥n para el contenedor Laravel
set -e

echo "üöÄ Iniciando configuraci√≥n del contenedor Laravel..."

# Verificar si el archivo .env existe, si no, crearlo desde .env.example
if [ ! -f /var/www/html/.env ]; then
    echo "üìÑ Creando archivo .env desde .env.example..."
    cp /var/www/html/.env.example /var/www/html/.env
fi

# PASO 1: Generar APP_KEY PRIMERO (debe ir antes de JWT para evitar corrupci√≥n)
if ! grep -q "APP_KEY=base64:" /var/www/html/.env || grep -q "APP_KEY=$" /var/www/html/.env || grep -q "APP_KEY=\"\"" /var/www/html/.env; then
    echo "üîë Generando APP_KEY..."
    cd /var/www/html && php artisan key:generate --force --no-interaction
    echo "‚úÖ APP_KEY generada exitosamente"
fi

# PASO 2: Configurar JWT DESPU√âS (para que no se corrompa con key:generate)
echo "üîê Configurando JWT..."
# Generar JWT_SECRET seguro sin caracteres problem√°ticos
JWT_SECRET=$(openssl rand -hex 32)

# Eliminar configuraci√≥n JWT existente si existe
sed -i '/# JWT Configuration/,/JWT_ALGO=/d' /var/www/html/.env

# Agregar configuraci√≥n JWT limpia al final
echo "" >> /var/www/html/.env
echo "# JWT Configuration" >> /var/www/html/.env
echo "JWT_SECRET=${JWT_SECRET}" >> /var/www/html/.env
echo "JWT_TTL=60" >> /var/www/html/.env
echo "JWT_REFRESH_TTL=20160" >> /var/www/html/.env
echo "JWT_ALGO=HS256" >> /var/www/html/.env
echo "‚úÖ JWT configurado completamente"

# Esperar a que PostgreSQL est√© disponible
echo "‚è≥ Esperando a que PostgreSQL est√© disponible..."
until pg_isready -h postgres_foro_academico -p 5432 -U foro_user; do
    echo "PostgreSQL no est√° listo - esperando..."
    sleep 2
done
echo "‚úÖ PostgreSQL est√° disponible"

# Configurar permisos
echo "üìÅ Configurando permisos..."
chown -R www-data:www-data /var/www/html
chmod -R 755 /var/www/html/storage
chmod -R 755 /var/www/html/bootstrap/cache

# Ejecutar migraciones
echo "üóÑÔ∏è Ejecutando migraciones..."
php /var/www/html/artisan migrate --force --no-interaction

# Ejecutar seeders SIEMPRE
echo "üå± Ejecutando seeders b√°sicos..."
php /var/www/html/artisan db:seed --class=BasicDataSeeder --force --no-interaction
echo "‚úÖ Seeders ejecutados exitosamente"

# Limpiar y cachear configuraci√≥n
echo "üßπ Limpiando cach√©..."
php /var/www/html/artisan config:clear --no-interaction
php /var/www/html/artisan cache:clear --no-interaction
php /var/www/html/artisan route:clear --no-interaction

echo "‚ö° Cacheando configuraci√≥n..."
php /var/www/html/artisan config:cache --no-interaction
php /var/www/html/artisan route:cache --no-interaction

# Verificar configuraci√≥n JWT
echo "ÔøΩ Verificando configuraci√≥n JWT..."
php /var/www/html/artisan tinker --execute="echo 'JWT_TTL: ' . config('jwt.ttl') . ' (type: ' . gettype(config('jwt.ttl')) . ')' . PHP_EOL;"

echo "‚úÖ Configuraci√≥n completada exitosamente!"

# Ejecutar supervisor
echo "üèÅ Iniciando supervisor..."
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
